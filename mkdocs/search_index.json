{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to LEAN + Docker documentation\n\n\nThe following pages are available -\n\n\n\n\n\n\nLEAN + Docker + VS Code\n\n\n\n\n\n\nLEAN + Docker",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-lean-docker-documentation",
            "text": "The following pages are available -    LEAN + Docker + VS Code    LEAN + Docker",
            "title": "Welcome to LEAN + Docker documentation"
        },
        {
            "location": "/lean-docker-vscode/",
            "text": "Backtesting with QuantConnect LEAN Engine and Docker\n\n\nIntroduction\n\n\nDocker containers\n are useful to minimize setup times and deployments as an application and its dependencies are packaged into one \ndocker image\n. These docker images can be run as a \ndocker container\n on your machine in an isolated environment. \n\n\nQuantConnect LEAN Engine and docker can be used to easily setup a development environment without worrying about installing any required packages and dependencies.\n\n\nThis tutorial starts from scratch on a development host and teaches you how to perform backtesting using LEAN easily.\n\n\nRequirements\n\n\n\n\nA development machine\n\n\nSupported processor architectures : AMD64/X64 with \nSLAT\n\n\nSupported OS : Linux, Windows and macOS\n\n\n4 GB RAM or more\n\n\nBIOS-level hardware \nvirtualization\n support enabled\n\n\n20GB+ Free space\n\n\n\n\n\n\n\n\nTutorial\n\n\nTo proceed with the tutorial follow the steps below\n\n\n\n\n\n\nInstall \nDocker\n on your host using the instructions provided \nhere\n. To verify the installation run \ndocker ps\n or \ndocker info\n in a terminal. The command should execute without errors.\n\n\n\n\nFor linux users, you can use docker as a non-root user by adding your user to the \ndocker\n group by executing \nsudo usermod -aG docker $USER\n. You will need to reboot to start using docker as your user.\n\n\n\n\n\n  \n\n  Your browser does not support the video tag.\n\n\n\n\n\n\n\nCreate a new development directory.\n\n\n\n\n\n\nIn the development directory create a new file called \nDockerfile\n with the following contents\n\n\n\n\n\n\n# Base image used is Ubuntu\nFROM ubuntu:18.04\n\n# apt update and install useful packages\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y \\\n    curl git apt-transport-https nano \n\n# Install Mono + nuget\nRUN apt install -y gnupg ca-certificates && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | tee /etc/apt/sources.list.d/mono-official-stable.list\nRUN apt-get update && apt install -y binutils mono-complete ca-certificates-mono mono-vbnc nuget referenceassemblies-pcl fsharp\n\n# Install python and dependencies\nRUN apt-get install -y build-essential python3.6 python3-pip  python3-dev\nRUN pip3 install cython==0.29.11 pandas==0.25.3 wrapt==1.11.2\n\n# Setup a build and run script\nRUN bash -c 'echo -e \"cd /Lean\\nnuget restore QuantConnect.Lean.sln\\nmsbuild QuantConnect.Lean.sln\\ncd /Lean/Launcher/bin/Debug\\nmono QuantConnect.Lean.Launcher.exe\\ncd /Lean\"' > /usr/local/bin/lean-build-run && chmod u+x /usr/local/bin/lean-build-run\n\n# Clone the LEAN repo\nRUN git clone --branch 8772 --depth 1 https://github.com/QuantConnect/Lean.git\n\n# Open a new shell for the user\nCMD [\"/bin/bash\"]\n\n\n\n\n\n\n\n\n\nOpen a command prompt/terminal on your host and navigate to the development directory.\n\n\n\n\n\n\nPrepare your LEAN environment \ndocker image\n using the following command\n\n\ndocker build -t lean-env .\n\n\n\n\n\n\nTo confirm if the image has been created run \ndocker images\n and you will see an image called \nlean-env\n.\n\n\n\n\n\n\nCreate a docker container from the newly created \nlean-env\n image\n\n\ndocker run -it --name lean-env lean-env\n\n\n\n  \n\n  Your browser does not support the video tag.\n\n\n\n\n\n\n\nInstall VS Code to use it for development\n\n\n\n\n\n\nInstall VS Code from instructions \nprovided here\n\n\n\n  \n\n  Your browser does not support the video tag.\n\n\n\n\n\n\n\nSetup VS Code and extensions\n\n\n\n\n\n\nRun VS Code and install the \nRemote Development\n extension pack \n\n\n\n\n\n\nConnect VS Code to the docker container by opening a \nRemote Window\n from the bottom left of the editor and choose \"Attach to running container\".\n\n\n\n\n\n\nInstall the \nC# extension\n\n\n\n\n\n\nInstall the \nVS Code .csproj extension\n. Go into File > Prefererences > Settings > Extensions > csproj configuration  > Item Type > Edit in settings.json and add the following -\n\n\n\"csproj.itemType\": {\n    \".cs\" : \"Compile\"\n}\n\n\n\n\n\n\nInstall the \nMono Debug extension\n.\n\n\n\n\n\n\nOpen \n/LEAN\n folder in VS Code.\n\n\n\n\n\n\nCreate a new Run/Debug configuration by selecting Run > Create a launch.json file and add the following object in the  \nconfigurations\n key -\n\n\n{\n  \"name\": \"LEAN\",\n  \"type\": \"mono\",\n  \"request\": \"launch\",\n  \"program\": \"/Lean/Launcher/bin/Debug/QuantConnect.Lean.Launcher.exe\",\n  \"cwd\": \"/Lean/Launcher/bin/Debug\"\n}\n\n\n\n\n\n\nCreate a task to build the project from VS Code by pressing ctrl+shift+p and selecting Tasks: Configure Task > Open tasks.json file > Others. Add the following to \ntasks\n -\n\n\n{\n  \"label\": \"LEAN Build\",\n  \"type\": \"shell\",\n  \"command\": \"nuget restore QuantConnect.Lean.sln && msbuild QuantConnect.Lean.sln\",\n  \"options\": {\n      \"cwd\": \"/Lean\"\n  },\n  \"problemMatcher\": [],\n  \"group\": {\n      \"kind\": \"build\",\n      \"isDefault\": true\n  }\n}\n\n\n\n\n\n\nBuild the project by pressing \nctrl+shift+b\n or by running \nctrl+shift+p\n > \nTasks: Run Task\n > LEAN Build.\n\n\n\n\n\n\nGoto the Run view and select \nLEAN\n and hit the play icon to start/debug the program.\n\n\n\n\n\n\n\n    \n\n    Your browser does not support the video tag.\n\n\n\n\n\n\n\n\n\n\n\nCreate and add your Backtesting algorithm\n\n\n\n\n\n\nAdd a new file for your algo under \nAlgorithm.Csharp\n and name it \nMyAlgo.cs\n.\n\n\n\n\n\n\nThe \nVS Code .csproj extension\n will ask you to add the file to the project, click Yes.\n\n\n\n\n\n\nAdd the following code to the file (or your own custom implementation) \n\n\nusing QuantConnect.Data.Market;\n\nnamespace QuantConnect.Algorithm.CSharp\n{\n\n    public class MyAlgo : QCAlgorithm\n    {\n        decimal myprice = 0;\n\n        private readonly Symbol _ibm = QuantConnect.Symbol.Create(\"IBM\", SecurityType.Equity, Market.USA);\n\n        public override void Initialize()\n        {\n            SetStartDate(2013, 01, 01);  //Set Start Date for backtesting\n            SetEndDate(2014, 01, 01);    //Set End Date for backtesting\n            SetCash(100000);\n\n            AddSecurity(SecurityType.Equity, \"IBM\", Resolution.Hour);\n            Securities[_ibm].SetLeverage(1.0m);\n        }\n\n        public void OnData(TradeBars data)\n        {\n            if (!data.ContainsKey(_ibm)) return;\n\n            if(!Portfolio.Invested){\n                SetHoldings(_ibm, 1.0m);\n                myprice = data[_ibm].Value;\n            } else {\n                if(data[_ibm].Value >  (myprice*1.05m)){\n                    SetHoldings(_ibm, 0.5m);\n                }\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\nModify the \nLauncher/config.json\n file -\n\n\n\n\n\n\nChange \nalgorithm-type-name\n to \nMyAlgo\n.\n\n\n\n\n\n\nMake sure that \nalgorithm-language\n is set to \nCSharp\n\n\n\n\n\n\nIf your data is kept in a different directory modify \ndata-folder\n to the appropriate path. For more info see  \nImporting Custom Data\n.\n\n\n\n\n\n\n\n\n\n\nBuild the program by pressing \nctrl+shift+b\n. The build command output is available via the TERMINAL for the LEAN Build task.\n\n\n\n\n\n\nRun the program by selecting Run > LEAN > Play icon.\n\n\n\n\n\n\nIn the \nDEBUG CONSOLE\n you can see the output of the program including various statistics like Total Trades, Average Win, Net Profit etc.\n\n\n\n                \n\n                Your browser does not support the video tag.\n        \n\n\n\n\n\n\n\n\n\n\nHelpful commands\n\n\n\n\nRestore nuget packages by executing the following inside your container\n\n\n\n\ncd /Lean\nnuget restore QuantConnect.Lean.sln\n\n\n\n\n\n\nCompile your code using the container\n\n\n\n\ncd /Lean\nmsbuild QuantConnect.Lean.sln\n\n\n\n\n\n\nRun your code using the container\n\n\n\n\ncd /Lean/Launcher/bin/Debug\nmono QuantConnect.Lean.Launcher.exe\n\n\n\n\n\n\n\n\nRun helper script to do nuget restore, compile and run operations together using \nlean-build-run\n.\n\n\n\n\n\n\nIf you want to restart a exited \nlean-env\n container, use \ndocker start -i $(docker ps -a -q --filter \"status=exited\" --filter \"name=lean-env\")",
            "title": "LEAN+Docker+VS Code"
        },
        {
            "location": "/lean-docker-vscode/#backtesting-with-quantconnect-lean-engine-and-docker",
            "text": "",
            "title": "Backtesting with QuantConnect LEAN Engine and Docker"
        },
        {
            "location": "/lean-docker-vscode/#introduction",
            "text": "Docker containers  are useful to minimize setup times and deployments as an application and its dependencies are packaged into one  docker image . These docker images can be run as a  docker container  on your machine in an isolated environment.   QuantConnect LEAN Engine and docker can be used to easily setup a development environment without worrying about installing any required packages and dependencies.  This tutorial starts from scratch on a development host and teaches you how to perform backtesting using LEAN easily.",
            "title": "Introduction"
        },
        {
            "location": "/lean-docker-vscode/#requirements",
            "text": "A development machine  Supported processor architectures : AMD64/X64 with  SLAT  Supported OS : Linux, Windows and macOS  4 GB RAM or more  BIOS-level hardware  virtualization  support enabled  20GB+ Free space",
            "title": "Requirements"
        },
        {
            "location": "/lean-docker-vscode/#tutorial",
            "text": "To proceed with the tutorial follow the steps below    Install  Docker  on your host using the instructions provided  here . To verify the installation run  docker ps  or  docker info  in a terminal. The command should execute without errors.   For linux users, you can use docker as a non-root user by adding your user to the  docker  group by executing  sudo usermod -aG docker $USER . You will need to reboot to start using docker as your user.   \n   \n  Your browser does not support the video tag.    Create a new development directory.    In the development directory create a new file called  Dockerfile  with the following contents    # Base image used is Ubuntu\nFROM ubuntu:18.04\n\n# apt update and install useful packages\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y \\\n    curl git apt-transport-https nano \n\n# Install Mono + nuget\nRUN apt install -y gnupg ca-certificates && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | tee /etc/apt/sources.list.d/mono-official-stable.list\nRUN apt-get update && apt install -y binutils mono-complete ca-certificates-mono mono-vbnc nuget referenceassemblies-pcl fsharp\n\n# Install python and dependencies\nRUN apt-get install -y build-essential python3.6 python3-pip  python3-dev\nRUN pip3 install cython==0.29.11 pandas==0.25.3 wrapt==1.11.2\n\n# Setup a build and run script\nRUN bash -c 'echo -e \"cd /Lean\\nnuget restore QuantConnect.Lean.sln\\nmsbuild QuantConnect.Lean.sln\\ncd /Lean/Launcher/bin/Debug\\nmono QuantConnect.Lean.Launcher.exe\\ncd /Lean\"' > /usr/local/bin/lean-build-run && chmod u+x /usr/local/bin/lean-build-run\n\n# Clone the LEAN repo\nRUN git clone --branch 8772 --depth 1 https://github.com/QuantConnect/Lean.git\n\n# Open a new shell for the user\nCMD [\"/bin/bash\"]    Open a command prompt/terminal on your host and navigate to the development directory.    Prepare your LEAN environment  docker image  using the following command  docker build -t lean-env .    To confirm if the image has been created run  docker images  and you will see an image called  lean-env .    Create a docker container from the newly created  lean-env  image  docker run -it --name lean-env lean-env  \n   \n  Your browser does not support the video tag.    Install VS Code to use it for development    Install VS Code from instructions  provided here  \n   \n  Your browser does not support the video tag.    Setup VS Code and extensions    Run VS Code and install the  Remote Development  extension pack     Connect VS Code to the docker container by opening a  Remote Window  from the bottom left of the editor and choose \"Attach to running container\".    Install the  C# extension    Install the  VS Code .csproj extension . Go into File > Prefererences > Settings > Extensions > csproj configuration  > Item Type > Edit in settings.json and add the following -  \"csproj.itemType\": {\n    \".cs\" : \"Compile\"\n}    Install the  Mono Debug extension .    Open  /LEAN  folder in VS Code.    Create a new Run/Debug configuration by selecting Run > Create a launch.json file and add the following object in the   configurations  key -  {\n  \"name\": \"LEAN\",\n  \"type\": \"mono\",\n  \"request\": \"launch\",\n  \"program\": \"/Lean/Launcher/bin/Debug/QuantConnect.Lean.Launcher.exe\",\n  \"cwd\": \"/Lean/Launcher/bin/Debug\"\n}    Create a task to build the project from VS Code by pressing ctrl+shift+p and selecting Tasks: Configure Task > Open tasks.json file > Others. Add the following to  tasks  -  {\n  \"label\": \"LEAN Build\",\n  \"type\": \"shell\",\n  \"command\": \"nuget restore QuantConnect.Lean.sln && msbuild QuantConnect.Lean.sln\",\n  \"options\": {\n      \"cwd\": \"/Lean\"\n  },\n  \"problemMatcher\": [],\n  \"group\": {\n      \"kind\": \"build\",\n      \"isDefault\": true\n  }\n}    Build the project by pressing  ctrl+shift+b  or by running  ctrl+shift+p  >  Tasks: Run Task  > LEAN Build.    Goto the Run view and select  LEAN  and hit the play icon to start/debug the program.    \n     \n    Your browser does not support the video tag.      Create and add your Backtesting algorithm    Add a new file for your algo under  Algorithm.Csharp  and name it  MyAlgo.cs .    The  VS Code .csproj extension  will ask you to add the file to the project, click Yes.    Add the following code to the file (or your own custom implementation)   using QuantConnect.Data.Market;\n\nnamespace QuantConnect.Algorithm.CSharp\n{\n\n    public class MyAlgo : QCAlgorithm\n    {\n        decimal myprice = 0;\n\n        private readonly Symbol _ibm = QuantConnect.Symbol.Create(\"IBM\", SecurityType.Equity, Market.USA);\n\n        public override void Initialize()\n        {\n            SetStartDate(2013, 01, 01);  //Set Start Date for backtesting\n            SetEndDate(2014, 01, 01);    //Set End Date for backtesting\n            SetCash(100000);\n\n            AddSecurity(SecurityType.Equity, \"IBM\", Resolution.Hour);\n            Securities[_ibm].SetLeverage(1.0m);\n        }\n\n        public void OnData(TradeBars data)\n        {\n            if (!data.ContainsKey(_ibm)) return;\n\n            if(!Portfolio.Invested){\n                SetHoldings(_ibm, 1.0m);\n                myprice = data[_ibm].Value;\n            } else {\n                if(data[_ibm].Value >  (myprice*1.05m)){\n                    SetHoldings(_ibm, 0.5m);\n                }\n            }\n        }\n    }\n}    Modify the  Launcher/config.json  file -    Change  algorithm-type-name  to  MyAlgo .    Make sure that  algorithm-language  is set to  CSharp    If your data is kept in a different directory modify  data-folder  to the appropriate path. For more info see   Importing Custom Data .      Build the program by pressing  ctrl+shift+b . The build command output is available via the TERMINAL for the LEAN Build task.    Run the program by selecting Run > LEAN > Play icon.    In the  DEBUG CONSOLE  you can see the output of the program including various statistics like Total Trades, Average Win, Net Profit etc.  \n                 \n                Your browser does not support the video tag.",
            "title": "Tutorial"
        },
        {
            "location": "/lean-docker-vscode/#helpful-commands",
            "text": "Restore nuget packages by executing the following inside your container   cd /Lean\nnuget restore QuantConnect.Lean.sln   Compile your code using the container   cd /Lean\nmsbuild QuantConnect.Lean.sln   Run your code using the container   cd /Lean/Launcher/bin/Debug\nmono QuantConnect.Lean.Launcher.exe    Run helper script to do nuget restore, compile and run operations together using  lean-build-run .    If you want to restart a exited  lean-env  container, use  docker start -i $(docker ps -a -q --filter \"status=exited\" --filter \"name=lean-env\")",
            "title": "Helpful commands"
        },
        {
            "location": "/lean-docker/",
            "text": "Backtesting with QuantConnect LEAN Engine and Docker\n\n\nIntroduction\n\n\nDocker containers\n are useful to minimize setup times and deployments as an application and its dependencies are packaged into one \ndocker image\n. These docker images can be run as a \ndocker container\n on your machine in an isolated environment. \n\n\nQuantConnect LEAN Engine and docker can be used to easily setup a development environment without worrying about installing any required packages and dependencies.\n\n\nThis tutorial starts from scratch on a development host and teaches you how to perform backtesting using LEAN easily.\n\n\nRequirements\n\n\n\n\nA development machine\n\n\nSupported processor architectures : AMD64/X64 with \nSLAT\n\n\nSupported OS : Linux, Windows and macOS\n\n\n4 GB RAM or more\n\n\nBIOS-level hardware \nvirtualization\n support enabled\n\n\n20GB+ Free space\n\n\n\n\n\n\n\n\nTutorial\n\n\nTo proceed with the tutorial follow the steps below\n\n\n\n\n\n\nInstall \nDocker\n on your host using the instructions provided \nhere\n. To verify the installation run \ndocker ps\n or \ndocker info\n in a terminal. The command should execute without errors.\n\n\n\n\nFor linux users, you can use docker as a non-root user by adding your user to the \ndocker\n group by executing \nsudo usermod -aG docker $USER\n. You will need to reboot to start using docker as your user.\n\n\n\n\n\n\n\n\nCreate a new development directory.\n\n\n\n\n\n\nOpen a command prompt/terminal on your host and navigate to the development directory.\n\n\n\n\n\n\nClone the LEAN repository in the development directory using \ngit clone --branch master https://github.com/QuantConnect/Lean.git\n.\n\n\n\n\n\n\n[META] THIS STEP WILL BE REMOVED IN THE FINAL DOCUMENTATION\n\n\nClone the modified Lean repo using \ngit clone --branch lean_and_docker https://github.com/gswebspace/Lean.git\n\n\n\n\n\n\n[META] THIS STEP WILL BE REMOVED IN THE FINAL DOCUMENTATION\n\n\ncd into the repo and prepare the \nlean-build-run\n \ndocker image\n using the following command\n\n\ndocker build -t lean-build-run -f DockerfileBuildRun .\n\n\n\n\n\n\n\n\n\n\nTo execute the code follow these steps -\n\n\n\n\n\n\nChange directory into the source code repo.\n\n\n\n\n\n\nCreate a \nResults\n folder in the directory.\n\n\n\n\n\n\nRun the helper script using \n./build_run_docker.sh\n\n\n\n\n\n\nThe script will ask you to define the config, Data and Results path. You can change the defaults if you are using a different directory, otherwise use the defaults by pressing the Enter key.\n\n\n\n\n\n\nOnce the script completes, the output will be available on the terminal as well as the Results folder.\n\n\n$ ./build_run_docker.sh \nEnter docker image [default: <meta/redacted>:latest]: \nEnter absolute path to Lean config file [default: /home/<redacted>/Lean/Launcher/config.json]: \nEnter absolute path to Data folder [default: /home/<redacted>/Lean/Data]: \nEnter absolute path to store results [default: /home/<redacted>/Lean/Results]: \nEnter absolute path to the code folder [default: /home/<redacted>/Lean]: \nPreparing packages...\nMSBuild auto-detection: using msbuild version '14.0' from '/usr/lib/mono/xbuild/14.0/bin'.\n.\n.\n.\n.\n.\n20200713 03:34:04.295 Trace:: BacktestingResultHandler.SendAnalysisResult(): Processed final packet\n20200713 03:34:04.296 Trace:: Engine.Run(): Disposing of setup handler...\n20200713 03:34:04.296 Trace:: Engine.Main(): Analysis Completed and Results Posted.\nEngine.Main(): Analysis Complete. Press any key to continue.",
            "title": "LEAN+Docker"
        },
        {
            "location": "/lean-docker/#backtesting-with-quantconnect-lean-engine-and-docker",
            "text": "",
            "title": "Backtesting with QuantConnect LEAN Engine and Docker"
        },
        {
            "location": "/lean-docker/#introduction",
            "text": "Docker containers  are useful to minimize setup times and deployments as an application and its dependencies are packaged into one  docker image . These docker images can be run as a  docker container  on your machine in an isolated environment.   QuantConnect LEAN Engine and docker can be used to easily setup a development environment without worrying about installing any required packages and dependencies.  This tutorial starts from scratch on a development host and teaches you how to perform backtesting using LEAN easily.",
            "title": "Introduction"
        },
        {
            "location": "/lean-docker/#requirements",
            "text": "A development machine  Supported processor architectures : AMD64/X64 with  SLAT  Supported OS : Linux, Windows and macOS  4 GB RAM or more  BIOS-level hardware  virtualization  support enabled  20GB+ Free space",
            "title": "Requirements"
        },
        {
            "location": "/lean-docker/#tutorial",
            "text": "To proceed with the tutorial follow the steps below    Install  Docker  on your host using the instructions provided  here . To verify the installation run  docker ps  or  docker info  in a terminal. The command should execute without errors.   For linux users, you can use docker as a non-root user by adding your user to the  docker  group by executing  sudo usermod -aG docker $USER . You will need to reboot to start using docker as your user.     Create a new development directory.    Open a command prompt/terminal on your host and navigate to the development directory.    Clone the LEAN repository in the development directory using  git clone --branch master https://github.com/QuantConnect/Lean.git .    [META] THIS STEP WILL BE REMOVED IN THE FINAL DOCUMENTATION  Clone the modified Lean repo using  git clone --branch lean_and_docker https://github.com/gswebspace/Lean.git    [META] THIS STEP WILL BE REMOVED IN THE FINAL DOCUMENTATION  cd into the repo and prepare the  lean-build-run   docker image  using the following command  docker build -t lean-build-run -f DockerfileBuildRun .      To execute the code follow these steps -    Change directory into the source code repo.    Create a  Results  folder in the directory.    Run the helper script using  ./build_run_docker.sh    The script will ask you to define the config, Data and Results path. You can change the defaults if you are using a different directory, otherwise use the defaults by pressing the Enter key.    Once the script completes, the output will be available on the terminal as well as the Results folder.  $ ./build_run_docker.sh \nEnter docker image [default: <meta/redacted>:latest]: \nEnter absolute path to Lean config file [default: /home/<redacted>/Lean/Launcher/config.json]: \nEnter absolute path to Data folder [default: /home/<redacted>/Lean/Data]: \nEnter absolute path to store results [default: /home/<redacted>/Lean/Results]: \nEnter absolute path to the code folder [default: /home/<redacted>/Lean]: \nPreparing packages...\nMSBuild auto-detection: using msbuild version '14.0' from '/usr/lib/mono/xbuild/14.0/bin'.\n.\n.\n.\n.\n.\n20200713 03:34:04.295 Trace:: BacktestingResultHandler.SendAnalysisResult(): Processed final packet\n20200713 03:34:04.296 Trace:: Engine.Run(): Disposing of setup handler...\n20200713 03:34:04.296 Trace:: Engine.Main(): Analysis Completed and Results Posted.\nEngine.Main(): Analysis Complete. Press any key to continue.",
            "title": "Tutorial"
        }
    ]
}